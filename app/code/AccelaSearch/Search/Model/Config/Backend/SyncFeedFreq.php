<?php
namespace AccelaSearch\Search\Model\Config\Backend;

use AccelaSearch\Search\Constants;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\App\Config\Value;
use Magento\Framework\App\Config\ValueFactory;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Framework\Model\Context;
use Magento\Framework\Registry;
use Magento\Framework\App\Cache\TypeListInterface;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\App\Config\ValueInterface;

/**
 * Class SyncFeedFreq
 * @package AccelaSearch\Search\Model\Config\Backend
 */
class SyncFeedFreq extends Value
{
    /**
     * @var ValueFactory
     */
    protected $_valueFactory;

    /**
     * SyncFeedFreq constructor.
     *
     * @param Context $context
     * @param Registry $registry
     * @param ScopeConfigInterface $config
     * @param TypeListInterface $cacheTypeList
     * @param AbstractResource|null $resource
     * @param AbstractDb|null $resourceCollection
     * @param ValueFactory $valueFactory
     * @param array $data
     */
    public function __construct(
        Context $context,
        Registry $registry,
        ScopeConfigInterface $config,
        TypeListInterface $cacheTypeList,
        ValueFactory $valueFactory,
        ?AbstractResource $resource = null,
        ?AbstractDb $resourceCollection = null,
        array $data = []
    )
    {
        $this->_valueFactory = $valueFactory;

        parent::__construct($context, $registry, $config, $cacheTypeList, $resource, $resourceCollection, $data);
    }

    /**
     * @return Value
     * @throws \Exception
     */
    public function afterSave()
    {
        $cron_enabled = $this->getValue();

        if ($cron_enabled) {
            $cron_expr = $this->getData(Constants::PATH_SYNC_FEED_GENERATION_FREQUENCY);

            try {
                /* @var ValueInterface $configValueCron */
                // loading the configuration by the path
                $configValueCron = $this->_valueFactory->create()->load(
                    Constants::PATH_CRONTAB_CRON_EXPR,
                    'path'
                );
                // setting the value
                $configValueCron->setValue($cron_expr);
                // setting the path
                $configValueCron->setPath(Constants::PATH_CRONTAB_CRON_EXPR);
                // saving
                $configValueCron->save();
            } catch (\Exception $e) {
                throw new \Exception(__('It is not possible to save the cron expression.'));
            }
        }

        return parent::afterSave(); // TODO: Change the autogenerated stub
    }
}
